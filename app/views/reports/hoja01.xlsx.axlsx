wb = xlsx_package.workbook

wb.styles do |style|

titu = style.add_style( border: Axlsx::STYLE_THIN_BORDER,
                                 alignment: { horizontal: :center,vertical: :center, wrap_text: :true },
                                b: true, sz: 8, bg_color: "C1C1C1")

soles = style.add_style(border: Axlsx::STYLE_THIN_BORDER,
                           alignment: { horizontal: :center ,vertical: :center},num_fmt: 3)




fechas = style.add_style(format_code: "mm-yyyy", border: Axlsx::STYLE_THIN_BORDER,
                        alignment: { horizontal: :center,vertical: :center })
fechad = style.add_style(format_code: "dd/mm/yy", border: Axlsx::STYLE_THIN_BORDER,
                                alignment: { horizontal: :center,vertical: :center })                        



centra = style.add_style( border: Axlsx::STYLE_THIN_BORDER,
                               alignment: { horizontal: :center,vertical: :center })




izq = style.add_style( border: Axlsx::STYLE_THIN_BORDER,
                                alignment: { horizontal: :left ,vertical: :center, wrap_text: :true})



desc = style.add_style( border: Axlsx::STYLE_THIN_BORDER,
                              alignment: { horizontal: :left ,vertical: :center, wrap_text: :true},sz: 9)



ddmm = style.add_style(format_code: "dd-mm", border: Axlsx::STYLE_THIN_BORDER,
                            alignment: { horizontal: :center,vertical: :center })


normal = style.add_style( alignment: { horizontal: :center,vertical: :center })


############################ merge
def merge_last_row(sheet,options ={})
  last_row = sheet.rows.last.index + 1
  first_col,last_col = options[:columns]
  if first_col && last_col
    sheet.merge_cells "#{first_col}#{last_row}:#{last_col}#{last_row}"
  else
    sheet.merge_cells sheet.rows.last
  end
  sheet.rows.last.style = style if options[:style]
end

############################

case @vopc.to_i
  when 1


wb.add_worksheet(name: "Pedido") do |sheet|



sheet.add_row []
 

sheet.add_row []





sheet.add_row ["FECHA", "O/P", "DETALLE", "MATERIAL",  "CANTIDAD"],
style: [titu, titu, titu, titu,  titu]

Movement.order(:id).each do |mov|

              detnomb = DetailsController.new
              prodnomb = ProductsController.new


# vfec1=Header.where(id:mov.header_id).select('fecha1 as dd').first.dd
# vop=Header.where(id:mov.header_id).select('strih01 as dd').first.dd
# vdet=Header.where(id:mov.header_id).select('strih02 as dd').first.dd




Header.where(id:mov.header_id).each do |enca| 

sheet.add_row [enca.fecha1,enca.strih01,enca.strih02,prodnomb.nomprod(mov.intm01),
                mov.floam02],
style: [fechad, centra, desc, desc, soles]

end




end       
sheet.column_widths *[10, 10, 10, 40, 10]

end    

when 2


wb.add_worksheet(name: "Pedido") do |sheet|

if Detail.where(element_id:7, orden2:1).count>0 then
   exp =Detail.where(element_id:7, orden2:1).select('cantidad as dd').first.dd
else
   exp=0
end


sheet.add_row []
 
ddi=Detail.where(element_id:7,orden2:1).select('descripcion as dd').first.dd
sheet.add_row [ddi],
style: [ titu]


sheet.add_row []

 



sheet.add_row [ "MATERIAL", "CANTIDAD", "PERFIL", "ALEACION",
              "PESO (KG)", "SALIDAS", "PZASxPRENSADA", "CULOTE", "PUNTAS",
              "NETO","BRUTO","LONG. TOCHO", "RENDIMIENTO","N TOCHOS"],
style: [titu, titu, titu,  titu, titu, titu, titu, titu, titu,
              titu, titu, titu, titu, titu]

Movement.order(:id).each do |mov|

              detnomb = DetailsController.new
              prodnomb = ProductsController.new


if detnomb.ppeso(5,mov.intm03) and detnomb.ppzaspre(5,mov.intm03) then
   
   vneto= detnomb.ppeso(5,mov.intm03)* detnomb.ppzaspre(5,mov.intm03)
else
   vneto=0
end


if detnomb.pculote(5,mov.intm03) and  detnomb.ppuntas(5,mov.intm03) then
  vbruto=vneto+detnomb.pculote(5,mov.intm03)+ detnomb.ppuntas(5,mov.intm03)
  
else
  vbruto=0
end

kg_cm=Detail.where(element_id:7,orden2:1).select('codigo as dd').first.dd.to_f
#kg_cm=0

if vbruto>0 then
 vlong=vbruto/kg_cm
 rend=vneto*100/vbruto
else
 vlong=0
 rend=0
end




 
if vneto>0 then
  nutocho=mov.floam02/vneto 
else
  nutocho=0
end

Header.where(id:mov.header_id).each do |enca| 

sheet.add_row [prodnomb.nomprod(mov.intm01),mov.floam02,
               detnomb.paraele(5,mov.intm03),
               detnomb.paleac(5,mov.intm03),
               detnomb.ppeso(5,mov.intm03),
               detnomb.ssalida(5,mov.intm03),
               detnomb.ppzaspre(5,mov.intm03),
               detnomb.pculote(5,mov.intm03),
               detnomb.ppuntas(5,mov.intm03),
                vneto, vbruto,vlong.to_i,
                rend,nutocho],
style: [ desc,  soles,desc, desc,centra,centra,centra,centra,centra,centra,
        centra,centra,centra,centra,centra]

end




end
      
sheet.column_widths *[ 30, 10,20,20,10,10,15,0,10,10,10,10,10,10]

end    


when 3


wb.add_worksheet(name: "Corte") do |sheet|

if Detail.where(element_id:7, orden2:1).count>0 then
   exp =Detail.where(element_id:7, orden2:1).select('cantidad as dd').first.dd
else
   exp=0
end


sheet.add_row []
 

sheet.add_row [nil,"PROGRAMA DE CORTE"],
style: [nil,titu]


sheet.add_row []

 



sheet.add_row [ "ALEACION", "DIAMETRO","PERFIL", "LONGITUD CM", "PESO (KG)", 
              "CANT. PZAS"],
style: [titu, titu, titu, titu, titu, titu]

Movement.order(:id).each do |mov|

              detnomb = DetailsController.new
              prodnomb = ProductsController.new


if detnomb.ppeso(5,mov.intm03) and detnomb.ppzaspre(5,mov.intm03) then
   
   vneto= detnomb.ppeso(5,mov.intm03)* detnomb.ppzaspre(5,mov.intm03)
else
   vneto=0
end

if detnomb.pculote(5,mov.intm03) and  detnomb.ppuntas(5,mov.intm03) then
  vbruto=vneto+detnomb.pculote(5,mov.intm03)+ detnomb.ppuntas(5,mov.intm03)
  
else
  vbruto=0
end

kg_cm=Detail.where(element_id:7,orden2:1).select('codigo as dd').first.dd.to_f
#kg_cm=0
ddi=Detail.where(element_id:7,orden2:1).select('descripcion as dd').first.dd

if vbruto>0 then
 vlong=vbruto/kg_cm
 rend=vneto*100/vbruto
 
else
 vlong=0
 rend=0
 
end



if vneto>0 then
  nutocho=mov.floam02/vneto 
else
  nutocho=0
end

Header.where(id:mov.header_id).each do |enca| 






sheet.add_row [ detnomb.paraele(5,mov.intm03),ddi,
           detnomb.paraele(5,mov.intm03),
          vlong.to_i, 
          vbruto,nutocho.to_i],
style: [ desc, desc,desc, centra, centra,centra]

end




end
      
sheet.column_widths *[ 20, 30,30,20,20,20,20]

end    

 when 4

Detail.where(element_id:3).order('orden1').each do |secto| 
wb.add_worksheet(name:secto.descripcion) do |sheet|

             
              
              vprodu=HeadersController.new

sheet.add_row []
 

sheet.add_row []

##ejecuta el calculo de despiece y lo guarda en producto
vprodu.acproduc


sheet.add_row ["PRODUCTO",  "CANTIDAD"],
style: [titu, titu]





Product.where(activo:6,seccion:secto.id).where('pedido>0 and (familia=8 or familia=9)').each do |produ|


sheet.add_row [produ.nombre,produ.pedido],
style: [  desc, soles]

end  # de product  

sheet.column_widths *[ 40, 10]

end    # de sheet   

end    # de secto   


end # fin de case opc
end #style
